{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","initialTodosList","userId","usersFromServer","find","App","useState","userSelect","setUserSelect","setTitle","setTodos","isErrorMessageEmptyTitle","setErrorMessageEmptyTitle","isErrorMessageEmptyUser","setErrorMessageEmptyUser","Paper","sx","margin","width","elevation","action","method","onSubmit","event","preventDefault","fullName","addNewTodo","currentTodos","choosenTodo","Math","max","FormControl","fullWidth","type","placeholder","value","onChange","currentTarget","disabled","Button","variant","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d5b1f43.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\nimport '../../App.scss';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        classNames('TodoInfo', { 'TodoInfo--completed': completed })\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (<UserInfo user={user} />)}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\nimport '../../App.scss';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport { Button, Paper, FormControl } from '@mui/material';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  // if there is no user with a given userId\n  return foundUser || null;\n}\n\nfunction findUserFullname(fullName: string): User | null {\n  return usersFromServer.find(user => user.name === fullName) || null;\n}\n\nexport const initialTodosList: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [userSelect, setUserSelect] = useState('');\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState(initialTodosList);\n  const [isErrorMessageEmptyTitle, setErrorMessageEmptyTitle] = useState(false);\n  const [isErrorMessageEmptyUser, setErrorMessageEmptyUser] = useState(false);\n\n  const handleTitleEnter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n    setErrorMessageEmptyTitle(false);\n  };\n\n  const handleChooseUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserSelect(event.currentTarget.value);\n    setErrorMessageEmptyUser(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title || !userSelect) {\n      setErrorMessageEmptyTitle(!title);\n      setErrorMessageEmptyUser(!userSelect);\n\n      return;\n    }\n\n    const addNewTodo = findUserFullname(userSelect);\n\n    setTodos(currentTodos => {\n      const largestTodoId = Math.max(...currentTodos.map(todo => todo.id));\n\n      const choosenTodo = {\n        id: largestTodoId + 1,\n        title,\n        completed: false,\n        userId: addNewTodo ? addNewTodo.id : null,\n        user: addNewTodo,\n      };\n\n      return [...currentTodos, choosenTodo];\n    });\n\n    setUserSelect('');\n    setTitle('');\n  };\n\n  return (\n    <Paper\n      className=\"Paper\"\n      sx={{\n        margin: '0 auto',\n        width: 'max-content',\n      }}\n      elevation={23}\n    >\n      <div className=\"App\">\n        <h1>Add todo form</h1>\n\n        <form\n          className=\"Form\"\n          action=\"/api/users\"\n          method=\"POST\"\n          onSubmit={handleSubmit}\n        >\n          <div className=\"field\">\n            <label>\n              <FormControl fullWidth>\n                <span>Title: </span>\n                <input\n                  type=\"text\"\n                  data-cy=\"titleInput\"\n                  placeholder=\"Enter a title\"\n                  id=\"title\"\n                  value={title}\n                  onChange={handleTitleEnter}\n                />\n              </FormControl>\n            </label>\n\n            {isErrorMessageEmptyTitle\n              && <span className=\"error\">Please enter a title</span>}\n          </div>\n\n          <div className=\"field\">\n            <label>\n              <span>User: </span>\n\n              <FormControl fullWidth>\n                <select\n                  data-cy=\"userSelect\"\n                  id=\"userSelect\"\n                  value={userSelect}\n                  onChange={handleChooseUser}\n                >\n                  <option\n                    disabled\n                    value=\"\"\n                  >\n                    Choose a user\n                  </option>\n\n                  {usersFromServer.map(user => (\n                    <option key={user.id} value={user.name}>\n                      {user.name}\n                    </option>\n                  ))}\n                </select>\n              </FormControl>\n            </label>\n\n            {isErrorMessageEmptyUser\n              && <span className=\"error\">Please choose a user</span>}\n          </div>\n\n          <Button\n            className=\"Button\"\n            type=\"submit\"\n            data-cy=\"submitButton\"\n            variant=\"contained\"\n            color=\"success\"\n          >\n            Add\n          </Button>\n        </form>\n\n        <TodoList todos={todos} />\n      </div>\n    </Paper>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}